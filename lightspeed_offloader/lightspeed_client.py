import logging
import requests
from base64 import b64encode
from .process_order_exception import ProcessOrderException

CHECKOUT_ENDPOINT = "/checkouts.json"
VARIANT_ENDPOINT = "/variants.json"
PRODUCT_ENDPOINT = "/products.json"
VALIDATE_ENDPOINT = "/validate.json"
ORDER_ENDPOINT = "/order.json"


# In case of performance issues see https://2.python-requests.org/en/master/user/advanced/#session-objects
class LightspeedClient:
    def __init__(self, api_url, api_key, api_secret):
        self.log = logging.getLogger(__name__)
        self.api_url = api_url
        self.api_key = api_key
        self.api_secret = api_secret

    def _get_auth_header(self):
        b64_credentials = b64encode(bytes(self.api_key + ":" + self.api_secret, "utf-8")).decode("ascii")
        return "Basic " + b64_credentials

    def create_checkout(self, checkout):
        """
        Sends HTTP POST request to Lightspeed API to create new checkout.
        See https://developers.lightspeedhq.com/ecom/endpoints/checkout/#post-create-a-new-checkout
        :param checkout: (dict) HTTP POST body represented as dictionary for an easy JSON serialization
        :return: checkout id generated by Lightspeed, or throws ProcessOrderException in case of HTTP error
        """
        self.log.debug("Creating checkout for %s", checkout["customer"]["email"])

        headers = {"Authorization": self._get_auth_header()}
        req_url = self.api_url + CHECKOUT_ENDPOINT
        response = requests.post(req_url, headers=headers, json=checkout)

        self._validate_response_status_code(response, 201, req_url, "POST")

        response_body = response.json()
        return response_body["id"]

    def get_all_product_variants(self):
        """
        Fetches all product variants.
        See https://developers.lightspeedhq.com/ecom/endpoints/variant/#get-all-variants
        :return: an array of product variants, or throws ProcessOrderException in case of HTTP error
        """
        self.log.debug("Fetching all product variants")

        headers = {"Authorization": self._get_auth_header()}
        req_url = self.api_url + VARIANT_ENDPOINT
        response = requests.get(req_url, headers=headers)

        self._validate_response_status_code(response, 200, req_url, "GET")

        response_body = response.json()
        return response_body["variants"]

    def add_product_to_checkout(self, product, checkout_id):
        """
        Adds product to the checkout.
        See https://developers.lightspeedhq.com/ecom/endpoints/checkout/#post-add-a-product
        :param product: (dict) HTTP POST body represented as dictionary for an easy JSON serialization
        :param checkout_id: (number) an id of the checkout to add product in
        :return: product id generated by Lightspeed, or throws ProcessOrderException in case of HTTP error
        """
        self.log.debug(
            (f"Adding product to the checkout {checkout_id}\n"
             f"Product: {product}")
        )

        headers = {"Authorization": self._get_auth_header()}
        req_url = f"{self.api_url}/checkouts/{checkout_id}{PRODUCT_ENDPOINT}"
        response = requests.post(req_url, headers=headers, json=product)

        self._validate_response_status_code(response, 201, req_url, "POST")

        response_body = response.json()
        return response_body["id"]

    def add_shipment_and_payment_methods(self, methods_information, checkout_id):
        """
        Updates checkout by adding 'shipment_method' and 'payment_method' fields.
        See https://developers.lightspeedhq.com/ecom/tutorials/creating-an-order/#put-update-the-shipment-method
        :param methods_information: (dict) HTTP POST body represented as dictionary for an easy JSON serialization
        :param checkout_id: (number) an id of the checkout to add product in
        :return: checkout object represented as dictionary, or throws ProcessOrderException in case of HTTP error
        """
        self.log.debug("Updating checkout %s with payment and shipping info", checkout_id)

        headers = {"Authorization": self._get_auth_header()}
        req_url = f"{self.api_url}/checkouts/{checkout_id}.json"
        response = requests.put(req_url, headers=headers, json=methods_information)

        self._validate_response_status_code(response, 200, req_url, "PUT")

        response_body = response.json()
        return response_body

    def validate_checkout(self, checkout_id):
        """
        Validate checkout before creating it.
        See https://developers.lightspeedhq.com/ecom/tutorials/creating-an-order/#get-validate-the-checkout.
        :param checkout_id: (number) an id of the checkout to validate
        :return: dictionary containing 'validated' and 'errors' attributes,
        or throws ProcessOrderException in case of HTTP error
        """
        self.log.debug("Validating checkout %s", checkout_id)

        headers = {"Authorization": self._get_auth_header()}
        req_url = f"{self.api_url}/checkouts/{checkout_id}{VALIDATE_ENDPOINT}"
        response = requests.get(req_url, headers=headers)

        self._validate_response_status_code(response, 200, req_url, "GET")

        response_body = response.json()
        return response_body

    def finish_checkout(self, checkout_id):
        """
       Converts checkout into an order.
       See https://developers.lightspeedhq.com/ecom/tutorials/creating-an-order/#post-finish-the-checkout.
       :param checkout_id: (number) an id of the checkout to submit
       :return: order id generated by Lightspeed, or throws ProcessOrderException in case of HTTP error
       """
        self.log.debug("Creating order from checkout %s", checkout_id)

        headers = {"Authorization": self._get_auth_header()}
        req_url = f"{self.api_url}/checkouts/{checkout_id}{ORDER_ENDPOINT}"
        # Non-empty payload is required by Lightspeed
        response = requests.post(req_url, headers=headers, json={"comment": ""})

        self._validate_response_status_code(response, 200, req_url, "POST")

        response_body = response.json()
        return response_body["order_id"]

    def update_order_payment_status(self, order_id, payment_status):
        """
        Updates an order with a given payment status.
        See https://developers.lightspeedhq.com/ecom/endpoints/order/#put-update-an-order.
        :param order_id: (number) id used to identify order
        :param payment_status: (dict) payment status to set
        :return: complete order object returned by Lightspeed
        """
        self.log.debug(f"Setting order {order_id} as paid")

        headers = {"Authorization": self._get_auth_header()}
        req_url = f"{self.api_url}/orders/{order_id}.json"

        response = requests.put(req_url, headers=headers, json=payment_status)

        self._validate_response_status_code(response, 200, req_url, "PUT")

        response_body = response.json()
        return response_body["order"]

    def _validate_response_status_code(self, response, expected_status, req_url, req_method):
        if response.status_code != expected_status:
            err_message = (
                f"HTTP {req_method} {req_url} returned {response.status_code} status code.\n"
                f"Expected code {expected_status}\n"
                f"Response body: {response.content}"
            )
            self.log.error(err_message)
            raise ProcessOrderException(err_message)
